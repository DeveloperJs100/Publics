
const { Client, GatewayIntentBits, REST, Routes, EmbedBuilder } = require('discord.js');

// Initialize client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent, // Ensure this intent is enabled if needed
    ],
});

// Define your bot token directly
const token = 'MTI3OTg1NjU4MjQ2NDYzOTA2Nw.Gy_OhI.sSOF87VlAMQvl24ZXyjSKH65KmLBfCZKJhSvJs'; // Replace with your actual token

// Define slash commands
const commands = [
    {
        name: 'bypass',
        description: 'Bypass a URL',
        options: [
            {
                name: 'url',
                type: 3, // STRING type
                description: 'The URL to bypass',
                required: true,
            },
        ],
    },
];

// Register commands
client.once('ready', async () => {
    const clientId = client.user.id;
    console.log(`Discord bot is ready! Client ID: ${clientId}`);

    const rest = new REST({ version: '10' }).setToken(token);

    try {
        await rest.put(Routes.applicationCommands(clientId), { body: commands });
        console.log('Successfully registered global application commands.');
    } catch (error) {
        console.error('Error registering commands:', error);
    }
});

// Initialize bypass count
let bypassCount = 0;

// Handle interactions
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;

    const { commandName, options } = interaction;

    if (commandName === 'bypass') {
        const url = options.getString('url');
        if (!url) {
            return interaction.reply({ content: 'URL parameter is required', ephemeral: true });
        }

        try {
            // Defer the reply to handle long operations
            await interaction.deferReply();

            const response = await fetch(`https://solar-api-omg.vercel.app/api/bypass?url=${encodeURIComponent(url)}`);
            if (!response.ok) throw new Error('Network response was not ok');
            
            const data = await response.json();
            const result = data.result || data.key; // Use data.key if result is not available

            if (!result) {
                return interaction.editReply({ content: 'Result not found in the response', ephemeral: true });
            }

            bypassCount++; // Increment the bypass count

            const embed = new EmbedBuilder()
                .setColor(0xFFFFF)
                .setDescription(`Bypassed Link: ${result}\nTotal Bypasses: ${bypassCount}`);

            // Optionally set URL if result contains a URL
            if (result.startsWith('http')) {
                embed.setURL(result);
            }

            await interaction.editReply({
                content: 'Successfully bypassed!',
                embeds: [embed],
            });
        } catch (error) {
            console.error('Error processing command:', error.message);
            await interaction.editReply({ content: 'An error occurred while processing your request.', ephemeral: true });
        }
    }
});

// Log in to Discord
client.login(token);
